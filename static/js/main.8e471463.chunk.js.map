{"version":3,"sources":["Word.js","App.js","serviceWorker.js","index.js"],"names":["Word","text","wordStyle","lit","className","numToWord","1","2","3","4","5","6","7","8","9","10","11","12","light","map","word","set","makeMap","arr","Map","forEach","App","wordsStart","wordsEnd","wordsStartMap","wordsEndMap","date","Date","hour","getHours","mins","getMinutes","m","lightWords","curWord","get","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAiBeA,MAdf,YAA4B,IAAbC,EAAY,EAAZA,KAEPC,EAAY,YAKhB,OAPuB,EAANC,MAIbD,EAAY,YAIZ,yBAAKE,UAAWF,GACXD,ICRPI,EAAY,CAACC,EAAG,MAAOC,EAAG,MAAOC,EAAE,QAASC,EAAE,OAAQC,EAAE,OAAQC,EAAE,MAAOC,EAAE,QAASC,EAAE,QAASC,EAAE,OAAQC,GAAG,MAAOC,GAAG,SAAUC,GAAG,UAEzI,SAASC,EAAMC,EAAKC,GAClBD,EAAIE,IAAID,GAAM,GAGhB,SAASE,EAAQC,GACf,IAAIJ,EAAM,IAAIK,IAEd,OADAD,EAAIE,SAAQ,SAAAL,GAAI,OAAID,EAAIE,IAAID,GAAM,MAC3BD,EAkGMO,MAlDf,WACE,IAAMC,EAAa,CAAC,KAAM,KAAM,MAAO,SAAU,OAAQ,UAAW,OAAQ,UAAW,OAAQ,MACzFC,EAAW,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,QAAS,OAAQ,MAAO,SAAU,SAAU,WAGjHC,EAAgBP,EAAQK,GACxBG,EAAcR,EAAQM,GAGtBG,EAAO,IAAIC,KACXC,EAAOF,EAAKG,WACZC,EAAOJ,EAAKK,aAIZH,EAAO,KACTA,GAAQ,IAGV,IAAII,EAAIF,EAQR,OAPIE,EAAI,KACNA,EAAI,GAAKA,GAlEb,SAAoBR,EAAeC,EAAaG,EAAME,EAAME,GAE1DnB,EAAMW,EAAe,MACrBX,EAAMW,EAAe,MACrBX,EAAMY,EAAa,WAGf,IAAMK,GAAQA,EAAO,IAEvBjB,EAAMW,EAAe,QACrBX,EAAMW,EAAe,SACZ,GAAKQ,GAAKA,EAAI,GACvBnB,EAAMW,EAAe,QACrBX,EAAMW,EAAe,YACZ,GAAKQ,GAAKA,EAAI,IACvBnB,EAAMW,EAAe,OACrBX,EAAMW,EAAe,YACZ,IAAMQ,GAAKA,EAAI,GACxBnB,EAAMW,EAAe,WACZ,IAAMQ,GAAKA,EAAI,IACxBnB,EAAMW,EAAe,UACrBX,EAAMW,EAAe,YACZ,IAAMQ,GAAKA,EAAI,KACxBnB,EAAMW,EAAe,UACrBX,EAAMW,EAAe,QACrBX,EAAMW,EAAe,YAGnB,GAAKM,GAAQA,GAAQ,GACvBjB,EAAMW,EAAe,QACZ,IAAMM,GAAQA,GAAQ,IAC/BjB,EAAMW,EAAe,MAInB,GAAKM,GAAQA,GAAQ,GACvBjB,EAAMY,EAAazB,EAAU4B,KAEhB,KAATA,IACFA,EAAO,GAETf,EAAMY,EAAazB,EAAU4B,EAAO,KA6BtCK,CAAWT,EAAeC,EAAaG,EAAME,EAAME,GAGjD,yBAAKjC,UAAU,OAEb,6BACE,wBAAIA,UAAU,SAAd,eAGF,yBAAKA,UAAU,kBACZuB,EAAWR,KAAI,SAAAoB,GAAO,OACrB,kBAAC,EAAD,CAAMtC,KAAMsC,EAASpC,IAAK0B,EAAcW,IAAID,QAE7CX,EAAST,KAAI,SAAAoB,GAAO,OACnB,kBAAC,EAAD,CAAMtC,KAAMsC,EAASpC,IAAK2B,EAAYU,IAAID,SAI9C,gCC5FcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e471463.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Word({text, lit}) {\n\n    var wordStyle = \"word-gray\";\n    if (lit) {\n        wordStyle = \"word-lit\";\n    }\n\n    return (\n        <div className={wordStyle}>\n            {text}\n        </div>\n    );\n}\n\nexport default Word;","import React from 'react';\nimport Word from './Word';\nimport './App.css';\n\nconst numToWord = {1: 'ONE', 2: 'TWO', 3:'THREE', 4:'FOUR', 5:'FIVE', 6:'SIX', 7:'SEVEN', 8:'EIGHT', 9:'NINE', 10:'TEN', 11:'ELEVEN', 12:'TWELVE'};\n\nfunction light(map, word) {\n  map.set(word, true);\n}\n\nfunction makeMap(arr) {\n  let map = new Map();\n  arr.forEach(word => map.set(word, false));\n  return map;\n}\n\nfunction lightWords(wordsStartMap, wordsEndMap, hour, mins, m) {\n  // always lit\n  light(wordsStartMap, \"IT\");\n  light(wordsStartMap, \"IS\");\n  light(wordsEndMap, \"O'CLOCK\");\n\n  // minutes\n  if (28 <= mins && mins < 33) {\n    // SPECIAL CASE --> no half to\n    light(wordsStartMap, \"HALF\");\n    light(wordsStartMap, \"PAST\");\n  } else if (3 <= m && m < 8) {\n    light(wordsStartMap, \"FIVE\");\n    light(wordsStartMap, \"MINUTES\");\n  } else if (8 <= m && m < 13) {\n    light(wordsStartMap, \"TEN\");\n    light(wordsStartMap, \"MINUTES\");\n  } else if (13 <= m && m < 18) {\n    light(wordsStartMap, \"QUARTER\");\n  } else if (18 <= m && m < 23) {\n    light(wordsStartMap, \"TWENTY\");\n    light(wordsStartMap, \"MINUTES\");\n  } else if (23 <= m && m < 28) {\n    light(wordsStartMap, \"TWENTY\");\n    light(wordsStartMap, \"FIVE\");\n    light(wordsStartMap, \"MINUTES\");\n  }\n\n  if (3 <= mins && mins <= 27) {\n    light(wordsStartMap, \"PAST\");\n  } else if (33 <= mins && mins <= 57) {\n    light(wordsStartMap, \"TO\");\n  }\n\n  // hour\n  if (0 <= mins && mins <= 32) {\n    light(wordsEndMap, numToWord[hour]);\n  } else {\n    if (hour === 12) {\n      hour = 0;\n    }\n    light(wordsEndMap, numToWord[hour + 1]);\n  }\n}\n\nfunction App() {  \n  const wordsStart = ['IT', 'IS', 'TEN', 'TWENTY', 'FIVE', 'QUARTER', 'HALF', 'MINUTES', 'PAST', 'TO'];\n  const wordsEnd = ['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE', 'TEN', 'ELEVEN', 'TWELVE', 'O\\'CLOCK'];\n\n  // initialize states of words\n  let wordsStartMap = makeMap(wordsStart);\n  let wordsEndMap = makeMap(wordsEnd);\n\n  // get date\n  var date = new Date();\n  var hour = date.getHours();\n  var mins = date.getMinutes();\n\n  // change hour and minutes if needed\n\n  if (hour > 12) {\n    hour -= 12;\n  }\n\n  var m = mins;\n  if (m > 30) {\n    m = 60 - m;\n  }\n\n  // LIGHT WORDS\n  lightWords(wordsStartMap, wordsEndMap, hour, mins, m);\n\n  return (\n    <div className=\"App\">\n\n      <div>\n        <h3 className=\"title\">WORD CLOCK</h3>\n      </div>\n\n      <div className=\"flex-container\">\n        {wordsStart.map(curWord => (\n          <Word text={curWord} lit={wordsStartMap.get(curWord)}/>\n        ))}\n        {wordsEnd.map(curWord => (\n          <Word text={curWord} lit={wordsEndMap.get(curWord)}/>\n        ))}\n      </div>\n\n      <div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}